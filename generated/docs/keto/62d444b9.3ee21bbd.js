(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{116:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),i=(n(0),n(194)),o=n(222),c=n(196),s={title:"Performance"},l={unversionedId:"performance",id:"performance",isDocsHomePage:!1,title:"Performance",description:"RelationTuplePrism()",source:"@site/docs/performance.mdx",slug:"/performance",permalink:"/keto/docs/next/performance",editUrl:"https://github.com/ory/keto/edit/master/docs/docs/performance.mdx",version:"current",lastUpdatedBy:"Patrik",lastUpdatedAt:1617728945,sidebar:"docs",previous:{title:"Implemented and Planned Features",permalink:"/keto/docs/next/implemented-planned-features"},next:{title:"Quickstart: Cat Videos Example",permalink:"/keto/docs/next/quickstart"}};Object(c.a)();var p=[{value:"Check Engine",id:"check-engine",children:[]},{value:"Expand Engine",id:"expand-engine",children:[]},{value:"References",id:"references",children:[]}],u={rightToc:p};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This document explains the time complexity of Ory Keto. Main memory complexity\nwill be analyzed and added at a later point. We only examine the evaluation\nengines (check- and expand-API) as all other parts are mainly determined by\ndependencies like your database of choice, or the de-/encoding of messages.\nExamples given omit the namespace for clarity."),Object(i.b)("h2",{id:"check-engine"},"Check Engine"),Object(i.b)("p",null,"In essence, the check-engine assumes that the relation tuples and their\nindirections assemble an acyclic directed graph, known as\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"concepts/graph-of-relations"}),"the graph of relations"),"."),Object(i.b)("p",null,"Consider the following example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-keto-relation-tuples"}),"file#access@(file#owner)       // probably defined via subjectset rewrites\nfile#access@user1              // access was granted directly\nfile#owner@user2               // file owner record; indirectly gets access\n")),Object(i.b)("p",null,"This is interpreted as the following graph:"),Object(i.b)(o.a,{chart:"\ngraph TD\n    A[file] --\x3e|access| B{{file#owner}}\n    A --\x3e|owner| C([user2])\n    A --\x3e|access| D([user1])\n    B -. file#access .-> C\n",mdxType:"Mermaid"}),Object(i.b)("p",null,"A check request of the form ",Object(i.b)("inlineCode",{parentName:"p"},"object#relation@user")," will be evaluated by\nsearching the graph starting at ",Object(i.b)("inlineCode",{parentName:"p"},"object")," going through ",Object(i.b)("inlineCode",{parentName:"p"},"relation")," trying to\nreach ",Object(i.b)("inlineCode",{parentName:"p"},"user"),". The request is allowed iff there is such a path."),Object(i.b)("p",null,"The algorithm used in Ory Keto for this graph traversal is breadth-first search.\nIn the worst case it has a time complexity of ",Object(i.b)("inlineCode",{parentName:"p"},"O(n+e)")," where ",Object(i.b)("inlineCode",{parentName:"p"},"n")," is the number\nof nodes reachable from the node ",Object(i.b)("inlineCode",{parentName:"p"},"object#relation")," through ",Object(i.b)("inlineCode",{parentName:"p"},"e")," edges. Space\ncomplexity is ",Object(i.b)("inlineCode",{parentName:"p"},"O(n)"),". Rearranged, both space and time complexity are ",Object(i.b)("inlineCode",{parentName:"p"},"O(b^d)"),"\nwhere ",Object(i.b)("inlineCode",{parentName:"p"},"b")," is the maximum breadth and ",Object(i.b)("inlineCode",{parentName:"p"},"d")," the maximum depth in the graph, seen\nfrom the search root. ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#references"}),"[1]")),Object(i.b)("p",null,"This means that the complexity heavily depends on the structure of the graph. If\nit contains deeply nested indirections, it will require many recursive calls to\nresolve those indirections. Analogously, if there are widely nested\nindirections, Ory Keto has to possibly resolve all of them. The goal is to\ndesign the ACL tuples in a way such that there are only view indirections to\nresolve. Learn more in our\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/keto/docs/next/guides/access-control-list-design-best-practices"}),"best practices around ACL design"),"."),Object(i.b)("p",null,"Because of this we decided that generic benchmarks will not yield any meaningful\nresult. We will therefore add a comparison with other similar projects later on."),Object(i.b)("h2",{id:"expand-engine"},"Expand Engine"),Object(i.b)("p",null,"Similar to how the check-engine traverses the graph of relationtuples, the\nexpand-engine builds the tree of all set operations it encounters. It resolves\nall indirections starting at the requested subjectset up to the specified depth.\nBecause it also uses breadth-first search, time and space complexity linearly\ndepend on the nodes reachable from the requested subjectset. The same\nperformance considerations apply here, while it is important to note that\nrequesting a low depth will further limit the complexity of the operation. The\nreturned tree can also exceed reasonable size limits quickly if the\nrelationtuples are deeply and/or widely nested."),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("p",null,Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Breadth-first_search"}),"[1] Breadth-first search"),"\non Wikipedia"))}d.isMDXComponent=!0},194:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,b=u["".concat(o,".").concat(h)]||u[h]||d[h]||i;return n?a.a.createElement(b,c(c({ref:t},l),{},{components:n})):a.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},196:function(e,t,n){"use strict";var r=n(21),a={punctuation:/[:#@()]/},i={pattern:/[^:#@()\n]+:/,inside:Object.assign({},a,{namespace:/.*/})},o={pattern:/[^:#@()\n]+#/,inside:Object.assign({},a,{symbol:/.*/})},c={pattern:/[^:#@()\n]+/,alias:"string"},s={pattern:/@[^:#@()\n]+/,inside:Object.assign({},a,{keyword:/.*/})},l={pattern:/@\(([^:#@()\n]+:)?([^:#@()\n]+)#([^:#@()\n]*)\)/,inside:{punctuation:/[@()]/,namespace:i,object:o,relation:c}};r.a.languages["keto-relation-tuples"]={comment:/\/\/.*(\n|$)/,"relation-tuple":{pattern:/([^:#@()\n]+:)?([^:#@()\n]+)#([^:#@()\n]+)@?((\(([^:#@()\n]+:)?([^:#@()\n]+)#([^:#@()\n]*)\))|([^:#@()\n]+))/,inside:{namespace:i,object:o,subjectID:s,subjectSet:l,relation:c}}},t.a=function(){}},222:function(e,t,n){"use strict";var r=n(0),a=n.n(r),i=n(257),o=n.n(i),c=n(55),s=n.n(c),l=n(242),p=n.n(l);o.a.initialize({startOnLoad:!0,logLevel:"fatal",securityLevel:"strict",arrowMarkerAbsolute:!1,theme:"neutral",flowchart:{useMaxWidth:!0,htmlLabels:!0,rankSpacing:65,nodeSpacing:30,curve:"basis"},sequence:{useMaxWidth:!0},gantt:{useMaxWidth:!0}});t.a=function(e){var t,n=e.chart,i=Object(r.useState)(!1),c=i[0],l=i[1],u=Object(r.useState)(void 0),d=u[0],h=u[1],b=Object(r.useState)("mermaid-"+Math.random().toString(36).substr(2,-1))[0],m=function(){return l(!c)};return Object(r.useEffect)((function(){o.a.render(b,n,(function(e){h(e)}))}),[]),a.a.createElement(a.a.Fragment,null,a.a.createElement("div",{onClick:m,className:p()(s.a.graph,s.a.pointer),dangerouslySetInnerHTML:{__html:d}}),a.a.createElement("div",{onClick:m,className:p()(s.a.overlay,s.a.pointer,s.a.graph,(t={},t[s.a.visible]=c,t))},a.a.createElement("div",{onClick:function(e){return e.stopPropagation()},className:p()(s.a.backdrop,s.a.graph),dangerouslySetInnerHTML:{__html:d}})))}},259:function(e,t){},260:function(e,t){},264:function(e,t){},265:function(e,t){},266:function(e,t){},267:function(e,t){},268:function(e,t){},269:function(e,t){},270:function(e,t){},271:function(e,t){},272:function(e,t){},273:function(e,t){},281:function(e,t,n){var r={"./locale":221,"./locale.js":221};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=281}}]);