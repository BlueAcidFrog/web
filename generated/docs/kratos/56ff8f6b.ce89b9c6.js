(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(1),a=n(9),i=(n(0),n(275)),r={id:"openid-connect-oidc-oauth2",title:"Social Sign In, OpenID Connect, and OAuth2"},s={id:"concepts/credentials/openid-connect-oidc-oauth2",title:"Social Sign In, OpenID Connect, and OAuth2",description:"The `oidc` method uses OpenID Connect, or OAuth2 where OpenID Connect is not",source:"@site/docs/concepts/credentials/openid-connect-oidc-oauth2.mdx",permalink:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2",editUrl:"https://github.com/ory/kratos/edit/master/docs/docs/concepts/credentials/openid-connect-oidc-oauth2.mdx",version:"next",lastUpdatedBy:"hackerman",lastUpdatedAt:1588773393,sidebar:"docs",previous:{title:"Username / Email & Password",permalink:"/kratos/docs/next/concepts/credentials/username-email-password"},next:{title:"Out-of-band communication via E-Mail and SMS",permalink:"/kratos/docs/next/concepts/email-sms"}},c=[{value:"Configuration",id:"configuration",children:[]},{value:"Data Mapping with Jsonnet",id:"data-mapping-with-jsonnet",children:[{value:"External Variable <code>claims</code>",id:"external-variable-claims",children:[]}]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"oidc")," method uses OpenID Connect, or OAuth2 where OpenID Connect is not\nsupported, to authenticate identities using a third-party identity provider,\nsuch as Google, Microsoft, GitHub - or any other OAuth2 / OpenID Connect\nprovider (for example ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.ory.sh/hydra"}),"ORY Hydra"),")."),Object(i.b)("p",null,"This strategy expects that you've set up your Identity Traits Default JSON\nSchema."),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"You can configure multiple OAuth2 / OpenID Connect providers. First, enable the\n",Object(i.b)("inlineCode",{parentName:"p"},"oidc")," method:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="path/to/my/kratos/config.yml"',title:'"path/to/my/kratos/config.yml"'}),"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  strategies:\n    oidc:\n      enabled: true\n")),Object(i.b)("p",null,"Next, you need to configure the providers you want to use (e.g. GitHub). Each\nprovider requires:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="path/to/my/kratos/config.yml"',title:'"path/to/my/kratos/config.yml"'}),'# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  strategies:\n    oidc:\n      providers:\n        - # REQUIRED - The ID of the provider.\n          # DO NOT change this once this is in use.\n          id: github\n\n          # REQUIRED - The provider you would like to use. ORY Kratos comes with some predefined providers to make\n          # life easier for you, but you can always opt for the "generic" provider, which works\n          # with any Certified OpenID Connect Provider (Google, ORY Hydra, ...):\n          #\n          #   provider: github\n          #   provider: google\n          #   .... more to come\n          #\n          provider: generic\n\n          # REQUIRED - See section "Data Mapping with Jsonnet" for more information.\n          mapper_url: http://mydomain.com/github.schema.json\n\n          # The OAuth2 / OpenID Connect provider will provide you with a OAuth2 Client ID and Client Secret. You need\n          # to set them here:\n          client_id: ...\n          client_secret: ...\n\n          # What scope to request. Usually, this would be something like "profile" or "email".\n          # Please check the documentation of the OAuth2 / OpenID Connect provider to see what\'s allowed here.\n          scope:\n            - email\n\n          # issuer_url is the OpenID Connect Server URL. You can leave this empty if `provider` is not set to `generic`.\n          # If set, neither `auth_url` nor `token_url` are required.\n          issuer_url: http://openid-connect-provider/\n\n          # auth_url is the authorize url, typically something like: https://example.org/oauth2/auth\n          # Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when\n          # `provider` is set to `generic`.\n          auth_url: http://openid-connect-provider/oauth2/auth\n\n          # token_url is the token url, typically something like: https://example.org/oauth2/token\n          # Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when\n          # `provider` is set to `generic`.\n          token_url: http://openid-connect-provider/oauth2/token\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},'It is very important to add the "session" hook to the after oidc registration\nhooks. Otherwise your users need to use the login flow again to be able to get a\nsession.'),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="path/to/my/kratos/config.yml"',title:'"path/to/my/kratos/config.yml"'}),"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  registration:\n    after:\n      oidc:\n        hooks:\n          - hook: session\n")))),Object(i.b)("h2",{id:"data-mapping-with-jsonnet"},"Data Mapping with Jsonnet"),Object(i.b)("p",null,"The data provided by Google, GitHub, Facebook, and others will vary in payloads.\nOne service might include the ",Object(i.b)("inlineCode",{parentName:"p"},"website")," or ",Object(i.b)("inlineCode",{parentName:"p"},"phone_number")," while another might\nnot."),Object(i.b)("p",null,"Therefore you need to specify how this data maps to the identity's traits. You\ncan do that by writing a ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/kratos/docs/next/reference/jsonnet"}),"Jsonnet Code Snippet")," and\nreferencing that in your ORY Kratos config file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="path/to/my/kratos/config.yml"',title:'"path/to/my/kratos/config.yml"'}),"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  strategies:\n    oidc:\n      providers:\n        - id: github\n          # ...\n          mapper_url: file://path/to/my/kratos/github.data-mapper.jsonnet\n          # You can also load this from a HTTP(S) source:\n          mapper_url: https://domain.com/path/to/my/kratos/github.data-mapper.jsonnet\n          # Or inline it using base64 encoding:\n          mapper_url: base64://bG9jYWwgY2xhaW1zID0gc3RkLmV4dFZhcignY2xhaW1zJyk7CmlmIHN0ZC5sZW5ndGgoY2xhaW1zLnN1YikgPT0gMCB0aGVuCiAgZXJyb3IgJ2NsYWltIHN1YiBub3Qgc2V0JwplbHNlCiAgewogICAgaWRlbnRpdHk6IHsKICAgICAgdHJhaXRzOiB7CiAgICAgICAgZW1haWw6IGNsYWltcy5zdWIsCiAgICAgICAgW2lmICJ3ZWJzaXRlIiBpbiBjbGFpbXMgdGhlbiAid2Vic2l0ZSIgZWxzZSBudWxsXTogY2xhaW1zLndlYnNpdGUsCiAgICAgIH0sCiAgICB9LAogIH0=\n")),Object(i.b)("p",null,"ORY Kratos adds an external variable called ",Object(i.b)("inlineCode",{parentName:"p"},"claims"),' to the data mapper. It\ncontains all the claims (e.g. username, email, ...) for the OpenID Connect or\nOAuth2 Provider. Keep in mind that the claims will vary per provider and per\nflow - depending on what permissions the user grants you (e.g. "App XYZ cannot\nsee my private email"). Your Jsonnet code must return a JSON object that looks\nlike:'),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-json5"}),"{\n  identity: {\n    traits: {\n      /* ... */\n    },\n  },\n}\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"For more information on Jsonnet check out our\n",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/kratos/docs/next/reference/jsonnet"}),"Jsonnet Documentation"),"."),Object(i.b)("p",{parentName:"div"},"To debug Jsonnet payloads, use the ",Object(i.b)("inlineCode",{parentName:"p"},"--dev")," flag and set ",Object(i.b)("inlineCode",{parentName:"p"},"log.level")," to ",Object(i.b)("inlineCode",{parentName:"p"},"debug"),"\n(e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"LOG_LEVEL=debug kratos serve --dev"),"). Logs with detailed payloads will be\nemitted once you complete an OpenID Connect / OAuth2 login or registration."))),Object(i.b)("p",null,"The Jsonnet code snippet"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsonnet",metastring:'title="path/to/my/kratos/github.data-mapper.jsonnet"',title:'"path/to/my/kratos/github.data-mapper.jsonnet"'}),'# claims contains all the data sent by the upstream.\nlocal claims = std.extVar(\'claims\');\n\n{\n  identity: {\n    traits: {\n      email: claims.email, // If email is not set the Jsonnet snippet will fail with an error.\n      [if "website" in claims then "website" else null]: claims.website, // The website claim is optional.\n    },\n  },\n}\n')),Object(i.b)("p",null,"returns"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-json"}),'{\n  "identity": {\n    "traits": {\n      "email": "foo@ory.sh",\n      "website": "https://www.ory.sh"\n    }\n  }\n}\n')),Object(i.b)("p",null,"when the ID Token body (or the OAuth2 equivalent) returned by the OpenID Connect\nprovider contains:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-json"}),'{\n  "sub": "some-identity-id-4hA8gk",\n  "email": "foo@ory.sh",\n  "website": "https://www.ory.sh"\n}\n')),Object(i.b)("p",null,"which is then being used for the identity's traits."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"sub"),' field, which is returned by OpenID Connect and OAuth2 servers alike is\nused as the primary credential identifier for the provider. This allows ORY\nKratos to link the identity to the "social sign in profile" for future login\nflows:'),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"# This is the YAML representation of an identity\nid: '9f425a8d-7efc-4768-8f23-7647a74fdf13'\n\ncredentials:\n  oidc:\n    id: oidc\n    identifiers:\n      - example:some-identity-id-4hA8gk\n    config:\n      - provider: example\n        identifier: some-identity-id-4hA8gk\n\ntraits_schema_url: http://foo.bar.com/person.schema.json # This comes from the default identity schema url.\n\ntraits:\n  email: foo@ory.sh # This is extracted from `username` using\n  website: https://www.ory.sh # This is extracted from `username` using\n")),Object(i.b)("h3",{id:"external-variable-claims"},"External Variable ",Object(i.b)("inlineCode",{parentName:"h3"},"claims")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"std.ExtVar('claims')")," object has the following structure and keys\navailable:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-go"}),'package oidc\n\ntype Claims struct {\n    Issuer              string `json:"iss,omitempty"`\n    Subject             string `json:"sub,omitempty"`\n    Name                string `json:"name,omitempty"`\n    GivenName           string `json:"given_name,omitempty"`\n    FamilyName          string `json:"family_name,omitempty"`\n    LastName            string `json:"last_name,omitempty"`\n    MiddleName          string `json:"middle_name,omitempty"`\n    Nickname            string `json:"nickname,omitempty"`\n    PreferredUsername   string `json:"preferred_username,omitempty"`\n    Profile             string `json:"profile,omitempty"`\n    Picture             string `json:"picture,omitempty"`\n    Website             string `json:"website,omitempty"`\n    Email               string `json:"email,omitempty"`\n    EmailVerified       bool   `json:"email_verified,omitempty"`\n    Gender              string `json:"gender,omitempty"`\n    Birthdate           string `json:"birthdate,omitempty"`\n    Zoneinfo            string `json:"zoneinfo,omitempty"`\n    Locale              string `json:"locale,omitempty"`\n    PhoneNumber         string `json:"phone_number,omitempty"`\n    PhoneNumberVerified bool   `json:"phone_number_verified,omitempty"`\n    UpdatedAt           int64  `json:"updated_at,omitempty"`\n}\n')))}p.isMDXComponent=!0},275:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return h}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},m=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),b=o,h=m["".concat(r,".").concat(b)]||m[b]||d[b]||i;return n?a.a.createElement(h,s({ref:t},l,{components:n})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);